import numpy as np
import pandas as pd
from sklearn.neighbors import NearestNeighbors

# def avatars_are_first_hit (full_bind_coordinates, distance_metric='minkowski'):
def avatars_are_first_hit (records_set_coordinates, avatars_set_coordinates, distance_metric='minkowski'):
    """ Tests for each record if the nearest avatar is the one generated by the original record itself
    
    Arguments:
        records_set_coordinates {dataframe} -- a numpy or pandas dataframe containing coordinates of records
        avatars_set_coordinates {dataframe} -- a numpy or pandas dataframe containing coordinates of avatars
    
    Keyword Arguments:
        distance_metric {str} -- a distance metric among 'cityblock', 'cosine', 'euclidean', 'l1', 'l2', 'manhattan', 'braycurtis', 'canberra', 'chebyshev', 'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule' (default: {minkowski})

    Raises:
        ValueError: invalid distance metric     

    Returns:
        array -- an array stating if the nearest neighbor of the supplied original record is the avatar created from this record
    """
    
    if distance_metric not in ['cityblock', 'cosine', 'euclidean', 'l1', 'l2', 'manhattan', 
    'braycurtis', 'canberra', 'chebyshev', 'correlation', 'dice', 'hamming', 
    'jaccard', 'kulsinski', 'mahalanobis', 'minkowski', 'rogerstanimoto', 
    'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule']:
        raise ValueError('distance_metric', 'invalid distance metric')

    if records_set_coordinates.shape[0] != avatars_set_coordinates.shape[0]:
        raise ValueError('dimension', 'Records set and avatars set dataframes must have the same number of observations')

    else :
        nn = NearestNeighbors(n_neighbors=1, algorithm = 'ball_tree', metric = distance_metric).fit(avatars_set_coordinates)
        __, indices = nn.kneighbors(records_set_coordinates)

    indices = [ item[0] for item in indices ]

    are_first_hit = np.equal(indices, range(0, records_set_coordinates.shape[0] ))

    return are_first_hit