from sklearn.neighbors import NearestNeighbors
import numpy as np
import pandas as pd

def radius_knn(records_set_coordinates, avatars_set_coordinates, record_to_avatar_distances):

    """compute global radius knn metric
    
    Arguments:
        records_set_coordinates {dataframe} -- a numpy or pandas dataframe containing coordinates of records
        avatars_set_coordinates {dataframe} -- a numpy or pandas dataframe containing coordinates of avatars
        record_to_avatar_distances {array} -- list of floats generated by the function record_to_avatar_distances

    Returns:
        hit_counts -- gathering informations of number of (avatars, records) between each record and his avatar
    """

    if records_set_coordinates.shape[0] != avatars_set_coordinates.shape[0]:
        raise ValueError('dimension', 'Records set and avatars set dataframes must have the same number of observations')

    if records_set_coordinates.shape[0] != len(record_to_avatar_distances):
        raise ValueError('distances', 'The number of supplied distances is different from the number of observations in dataframes')

    coordinates = pd.concat([records_set_coordinates, avatars_set_coordinates]).reset_index(drop=True)
    ## KNN
    nn = NearestNeighbors(n_neighbors=1, algorithm = 'ball_tree', metric = 'euclidean').fit(coordinates)

    hit_counts = []
    N = records_set_coordinates.shape[0]

    # for each point in records_set
    for i in range(0, N):

        # get value of the record
        target_point = coordinates.iloc[i,:].values

        # calculate distances and indexes of each points in the radius
        inside_radius_list = nn.radius_neighbors(X=[target_point], radius=record_to_avatar_distances[i])

        # Count the number of avatar an records in the radius 
        #Â if index is upper than N-1 then avatar
        # else : record
        avatars_count = (sum(1 for k in inside_radius_list[1][0] if k > (N-1))) 
        records_count = (len(inside_radius_list[1][0]) - avatars_count)-1

        hit_counts.append((avatars_count, records_count))

    return np.array(hit_counts)

