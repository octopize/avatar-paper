import numpy as np
import pandas as pd
from numpy.typing import NDArray
from sklearn.neighbors import NearestNeighbors

from metrics.faiss_knn import FaissKNeighbors


def avatars_are_k_hit(
    records_coordinates: pd.DataFrame,
    avatars_coordinates: pd.DataFrame,
    distance_metric: str = "minkowski",
    k: int = 1,
) -> NDArray[np.bool_]:
    """Test for each record if the nearest avatar is the one generated by the original record itself.

    Arguments:
        records_coordinates
        avatars_coordinates
        distance_metric
        k

    Returns:
        array: whether the nearest neighbor of the supplied original
          record is the avatar created from this record
    """
    if distance_metric not in [
        "cityblock",
        "cosine",
        "euclidean",
        "l1",
        "l2",
        "manhattan",
        "braycurtis",
        "canberra",
        "chebyshev",
        "correlation",
        "dice",
        "hamming",
        "jaccard",
        "kulsinski",
        "mahalanobis",
        "minkowski",
        "rogerstanimoto",
        "russellrao",
        "seuclidean",
        "sokalmichener",
        "sokalsneath",
        "sqeuclidean",
        "yule",
    ]:
        raise ValueError("distance_metric", "invalid distance metric")

    if records_coordinates.shape[0] != avatars_coordinates.shape[0]:
        raise ValueError(
            "dimension",
            "Records set and avatars set dataframes must have the same number of observations",
        )

    if distance_metric == "minkowski":
        nn = FaissKNeighbors(k=k)
        nn.fit(np.array(avatars_coordinates))
        distances, indices = nn.predict(np.array(records_coordinates))
    else:
        nn = NearestNeighbors(
            n_neighbors=1, algorithm="ball_tree", metric=distance_metric
        )
        nn.fit(avatars_coordinates)
        distances, indices = nn.kneighbors(records_coordinates)  # type: ignore

    indices_array: NDArray[np.int_] = np.array([item[0] for item in indices])

    are_k_hit: NDArray[np.bool_] = np.equal(
        indices_array, range(0, records_coordinates.shape[0])
    )

    return are_k_hit
