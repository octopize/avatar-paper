import numpy as np
from sklearn.neighbors import NearestNeighbors


def avatars_are_first_hit(
    records_set_coordinates, avatars_set_coordinates, distance_metric="minkowski"
):
    """Test for each record if the nearest avatar is the one generated by the original record itself.

    Arguments:
        records_set_coordinates {dataframe}
        avatars_set_coordinates {dataframe}

    Keyword Arguments:
        distance_metric {str}

    Raises:
        ValueError: invalid distance metric

    Returns:
        array -- whether the nearest neighbor of the supplied original
          record is the avatar created from this record
    """
    if distance_metric not in [
        "cityblock",
        "cosine",
        "euclidean",
        "l1",
        "l2",
        "manhattan",
        "braycurtis",
        "canberra",
        "chebyshev",
        "correlation",
        "dice",
        "hamming",
        "jaccard",
        "kulsinski",
        "mahalanobis",
        "minkowski",
        "rogerstanimoto",
        "russellrao",
        "seuclidean",
        "sokalmichener",
        "sokalsneath",
        "sqeuclidean",
        "yule",
    ]:
        raise ValueError("distance_metric", "invalid distance metric")

    if records_set_coordinates.shape[0] != avatars_set_coordinates.shape[0]:
        raise ValueError(
            "dimension",
            "Records set and avatars set dataframes must have the same number of observations",
        )

    else:
        nn = NearestNeighbors(
            n_neighbors=1, algorithm="ball_tree", metric=distance_metric
        ).fit(avatars_set_coordinates)
        distances, indices = nn.kneighbors(records_set_coordinates)

    indices = [item[0] for item in indices]

    are_first_hit = np.equal(indices, range(0, records_set_coordinates.shape[0]))

    return are_first_hit
