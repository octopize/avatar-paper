import numpy as np

from lsg.security_metrics.radius_knn import radius_knn


def local_cloaking(
    records_set_coordinates,
    avatars_set_coordinates,
    record_to_avatar_distances,
):
    """Get summary of global radius knn metric.

    Arguments:
        records_set_coordinates {dataframe}
        avatars_set_coordinates {dataframe}
        record_to_avatar_distances {array} -- floats generated by record_to_avatar_distance

    Returns:
        dict -- gathering useful informations
    """
    if records_set_coordinates.shape[0] != avatars_set_coordinates.shape[0]:
        raise ValueError(
            "dimension",
            "Records set and avatars set dataframes must have the same number of observations",
        )

    if records_set_coordinates.shape[0] != len(record_to_avatar_distances):
        raise ValueError(
            "distances",
            "The number of supplied distances is different from the number of observations",
        )

    hit_counts = radius_knn(
        records_set_coordinates, avatars_set_coordinates, record_to_avatar_distances
    )

    no_hit = np.array([sum(t) == 0 for t in hit_counts])

    summary = {
        "empty_rate": np.mean(no_hit),
        "avatars_median": np.median([t[0] for t in hit_counts]),
        "records_median": np.median([t[1] for t in hit_counts]),
        "hit_counts": hit_counts,
        "hidden_rate": sum(1 for c in hit_counts if c[0] == 0),
    }

    return summary
